A. Pizza Metrics

Q1:
select count(order_id)
from customer_orders
where order_id in (select order_id from runner_orders where cancellation is null)

Q2:
select count(distinct order_id)
from customer_orders
where order_id in (select order_id from runner_orders where cancellation is null)v

Q3:
select runner_id,count(*) as num_of_succesful_orders
from runner_orders
where order_id in (select order_id from runner_orders where cancellation is null)
group by runner_id

Q4:
select pizza_id,count(*) as num_of_pizzas_delivered
from customer_orders
where order_id in (select order_id from runner_orders where cancellation is null)
group by pizza_id

Q5:
select customer_id,pizza_id,count(*) as num_of_pizzas_ordered
from customer_orders
group by customer_id,pizza_id

Q6:
select top 1 count(*) as max_of_pizzas_in_single_delivery
from customer_orders
where order_id in (select order_id from runner_orders where cancellation is null)
group by order_id
order by count(*) desc

Q7:
select customer_id,sum(case when extras is NULL AND exclusions is NULL then 1 else 0 end) as pizzas_without_changes,
sum(case when extras is not NULL or exclusions is not NULL then 1 else 0 end) as pizza_with_changes
from customer_orders
where order_id in (select order_id from runner_orders where cancellation is null)
group by customer_id

Q8:
select sum(case when extras is not NULL and exclusions is not NULL then 1 else 0 end) as pizzas_with_extras_and_exclusions
from customer_orders
where order_id in (select order_id from runner_orders where cancellation is null)

Q9:
select datepart(hour,order_time) as hour,count(*) as num_of_orders
from customer_orders
where order_id in (select order_id from runner_orders where cancellation is null)
group by datepart(hour,order_time)

Q10:
select datepart(WEEKDAY,order_time) as week_day,count(*) as num_of_orders
from customer_orders
where order_id in (select order_id from runner_orders where cancellation is null)
group by datepart(WEEKDAY,order_time)
------------------------------------------------------------------------------------

B. Runner and Customer Experience
#1
with max_date as(
select max(registration_date) as last_date
from runners),

dates as(
select cast ('2021-01-01' as date) as week_date union all select dateadd(day,7,week_date) as week_date from dates,max_date where week_date<last_date)

select week_date, count(case when datediff(day,week_date,registration_date) between 0 and 6 then 1 else null end) as num
from dates,runners
group by week_date

#2
select runner_id, avg(datediff(mi,order_time,pickup_time)) as avg_pickup_time
from runner_orders as r
join customer_orders as c
on r.order_id=c.order_id
where pickup_time is not null
group by runner_id

#3 didnt understand

#4
select customer_id,avg(cast(distance as float)) as avg_distance
from customer_orders as c
join runner_orders as r
on c.order_id=r.order_id
where distance is not null
group by customer_id

#5
select max(cast(distance as float))-min(cast(distance as float)) as dif_between_max_and_min
from runner_orders

#6 skipped

#7
select distinct(runner_id),count(pickup_time) over(partition by runner_id)*100/count(*) over(partition by runner_id) as succesful_delivery_share
from runner_orders

C. Ingredient Optimisation
#1
with toppings as(
select pizza_id, 
left(convert(varchar(max),toppings),charindex(',',convert(varchar(max),toppings)+',')-1) as topping_id,
stuff(convert(varchar(max),toppings),1,charindex(',',convert(varchar(max),toppings)+','),'') as topping_left
from pizza_recipes
union all
select pizza_id, 
left(topping_left,charindex(',',topping_left+',')-1) as topping_id,
stuff(topping_left,1,charindex(',',topping_left+','),'') as topping_left
from toppings
where topping_left>'')

select pizza_name,topping_name
from toppings as d 
join pizza_toppings as t
on d.topping_id=t.topping_id
join pizza_names as n
on d.pizza_id=n.pizza_id

#2
with orders as(
select order_id,
left(convert(varchar(max),extras),CHARINDEX(',',convert(varchar(max),extras)+',')-1) as extras,
stuff(convert(varchar(max),extras),1,CHARINDEX(',',convert(varchar(max),extras)+','),'') as extras_left
from customer_orders
where extras is not null
union all
select order_id,
left(extras_left,CHARINDEX(',',extras_left+',')-1) as extras,
stuff(extras_left,1,CHARINDEX(',',extras_left+','),'') as extras_left
from orders
where extras_left>'')

select top 1 extras,count(extras) as num_of_appearences
from orders
group by extras
order by count(extras) desc

#3
with orders as(
select order_id,
left(convert(varchar(max),exclusions),CHARINDEX(',',convert(varchar(max),exclusions)+',')-1) as exclusions,
stuff(convert(varchar(max),exclusions),1,CHARINDEX(',',convert(varchar(max),exclusions)+','),'') as exclusions_left
from customer_orders
where exclusions is not null
union all
select order_id,
left(exclusions_left,CHARINDEX(',',exclusions_left+',')-1) as exclusions,
stuff(exclusions_left,1,CHARINDEX(',',exclusions_left+','),'') as exclusions_left
from orders
where exclusions_left>'')

select top 1 exclusions,count(exclusions) as num_of_appearences
from orders
group by exclusions
order by count(exclusions) desc

#4
with new_customer_orders as(
select ROW_NUMBER() over(order by order_id) as pizza_num,order_id,cast(pizza_name as varchar(max)) as pizza_name,cast(exclusions as varchar(max)) as exclusions,cast(extras as varchar(max)) as extras
from customer_orders as c
join pizza_names as p
on c.pizza_id=p.pizza_id),

orders as (
select pizza_num,pizza_name,
left(exclusions,charindex(',',exclusions+',')-1) as new_exclusions,
stuff(exclusions,1,charindex(',',exclusions+','),'') as exclusions_left,
left(extras,charindex(',',extras+',')-1) as new_extras,
stuff(extras,1,charindex(',',extras+','),'') as extras_left
from new_customer_orders
union all
select pizza_num,pizza_name,
left(exclusions_left,charindex(',',exclusions_left+',')-1) as new_exclusions,
stuff(exclusions_left,1,charindex(',',exclusions_left+','),'') as exclusions_left,
left(extras_left,charindex(',',extras_left+',')-1) as new_extras,
stuff(extras_left,1,charindex(',',extras_left+','),'') as extras_left
from orders
where exclusions_left>'' or extras_left>'')

select pizza_num,pizza_name+ case when exclusions is not null then ' - Exclude '+exclusions else '' end+case when extras is not null then ' - Extra '+extras else '' end as order_item
from (
select pizza_num,pizza_name,STRING_AGG(cast(exclusions as varchar),',') within group(order by pizza_num) as exclusions,
STRING_AGG(cast(extras as varchar),',') within group(order by pizza_num) as extras
from (
select pizza_num,pizza_name,pt1.topping_name as exclusions,pt2.topping_name as extras
from orders o
left join pizza_toppings as pt1
on o.new_exclusions=pt1.topping_id
left join pizza_toppings as pt2
on o.new_extras=pt2.topping_id) as sub 
group by pizza_num,pizza_name) as sub2
order by pizza_num

#6
with new_customer_orders as(
select ROW_NUMBER() over(order by order_id) as pizza_num,pizza_id,order_id,cast(exclusions as varchar(max)) as exclusions,cast(extras as varchar(max)) as extras,order_time
from customer_orders as c
where order_id in (select order_id from runner_orders where pickup_time is not null)),

orders as (
select pizza_num,pizza_id,
left(exclusions,charindex(',',exclusions+',')-1) as new_exclusions,
stuff(exclusions,1,charindex(',',exclusions+','),'') as exclusions_left,
left(extras,charindex(',',extras+',')-1) as new_extras,
stuff(extras,1,charindex(',',extras+','),'') as extras_left
from new_customer_orders
union all
select pizza_num,pizza_id,
left(exclusions_left,charindex(',',exclusions_left+',')-1) as new_exclusions,
stuff(exclusions_left,1,charindex(',',exclusions_left+','),'') as exclusions_left,
left(extras_left,charindex(',',extras_left+',')-1) as new_extras,
stuff(extras_left,1,charindex(',',extras_left+','),'') as extras_left
from orders
where exclusions_left>'' or extras_left>''),

new_pizza_recepies as(
select pizza_id,
left(cast(toppings as varchar(max)),charindex(',',cast(toppings as varchar(max))+',')-1) as new_toppings,
stuff(cast(toppings as varchar(max)),1,charindex(',',cast(toppings as varchar(max))+','),'') as toppings_left
from pizza_recipes
union all
select pizza_id,
left(toppings_left,charindex(',',toppings_left+',')-1) as new_toppings,
stuff(toppings_left,1,charindex(',',toppings_left+','),'') as toppings_left
from new_pizza_recepies
where toppings_left>''),

num_of_pizza_toppings as(
select topping_id,pizza_id,count(new_toppings) as num
from new_pizza_recepies as r
join pizza_toppings as t
on r.new_toppings=t.topping_id
group by topping_id,pizza_id)

select sub.topping_id,num_of_toppings-exclusions_num+extras_num as num_of_toppings
from(
select topping_id,sum(num_of_toppings) as num_of_toppings
from(
select topping_id,r.pizza_id,num*num_of_pizzas as num_of_toppings
from num_of_pizza_toppings as r
join(
select distinct pizza_id,count(*) over (partition by pizza_id) as num_of_pizzas
from orders) as sub
on r.pizza_id=sub.pizza_id) as sub
group by topping_id) as sub
join(
select t.topping_id,isnull(exclusions_num,0) as exclusions_num,isnull(extras_num,0) as extras_num
from pizza_toppings as t
left join (
select new_exclusions as topping_id,count(new_exclusions) as exclusions_num
from orders
group by new_exclusions) as o
on t.topping_id=trim(o.topping_id)
left join (
select new_extras as topping_id,count(new_extras) as extras_num
from orders
group by new_extras) as ord
on t.topping_id=trim(ord.topping_id)) as sub2
on sub.topping_id=sub2.topping_id
order by num_of_toppings desc
